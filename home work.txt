import heapq
import math

MOVES = [(0,1), (1,0), (0,-1), (-1,0)]

DIAGONAL_MOVES = [(1,1), (1,-1), (-1,1), (-1,-1)]

def manhattan(a, b):
    return abs(a[0]-b[0]) + abs(a[1]-b[1])

def euclidean(a, b):
    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)

def diagonal(a, b):
    return max(abs(a[0]-b[0]), abs(a[1]-b[1]))


def greedy_bfs(grid, start, goal, heuristic):
    open_list = []
    heapq.heappush(open_list, (heuristic(start, goal), start))
    came_from = {}
    visited = set()

    while open_list:
        _, current = heapq.heappop(open_list)
        if current == goal:
            return reconstruct_path(came_from, start, goal)

        visited.add(current)

        for dx, dy in MOVES:
            neighbor = (current[0]+dx, current[1]+dy)
            if is_valid(grid, neighbor) and neighbor not in visited:
                if neighbor not in came_from:
                    came_from[neighbor] = current
                    heapq.heappush(open_list, (heuristic(neighbor, goal), neighbor))

    return None



def a_star(grid, start, goal, heuristic):
    open_list = []
    heapq.heappush(open_list, (0, start))
    came_from = {}
    g_score = {start: 0}

    while open_list:
        _, current = heapq.heappop(open_list)
        if current == goal:
            return reconstruct_path(came_from, start, goal)

        for dx, dy in MOVES:
            neighbor = (current[0]+dx, current[1]+dy)
            if is_valid(grid, neighbor):
                tentative_g = g_score[current] + 1
                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    g_score[neighbor] = tentative_g
                    f_score = tentative_g + heuristic(neighbor, goal)
                    heapq.heappush(open_list, (f_score, neighbor))
                    came_from[neighbor] = current

    return None


def is_valid(grid, pos):
    x, y = pos
    return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] != "1"


def reconstruct_path(came_from, start, goal):
    path = []
    current = goal
    while current != start:
        path.append(current)
        current = came_from[current]
    path.append(start)
    return path[::-1]


grid = [
    ["S","0","0","1","0"],
    ["1","1","0","1","G"],
    ["0","0","0","1","0"],
    ["1","1","0","1","1"],
    ["0","0","0","0","0"]
]

start = None
goal = None
for i in range(len(grid)):
    for j in range(len(grid[0])):
        if grid[i][j] == "S":
            start = (i, j)
        elif grid[i][j] == "G":
            goal = (i, j)

print("Greedy BFS (Manhattan):", greedy_bfs(grid, start, goal, manhattan))
print("A* (Manhattan):", a_star(grid, start, goal, manhattan))
print("A* (Euclidean):", a_star(grid, start, goal, euclidean))
print("A* (Diagonal):", a_star(grid, start, goal, diagonal))
