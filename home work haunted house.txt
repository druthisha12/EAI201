import heapq
import math

def manhattan(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def euclidean(a, b):
    return math.sqrt((a[0] - b[0])*2 + (a[1] - b[1])*2)

def diagonal(a, b):
    return max(abs(a[0] - b[0]), abs(a[1] - b[1]))

def reconstruct_path(came_from, current):
    path = []
    while current in came_from:
        path.append(current)
        current = came_from[current]
    path.append(current)
    return path[::-1]

def greedy_best_first(grid, start, goal, heuristic):
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    visited = set()
    
    while open_set:
        _, current = heapq.heappop(open_set)
        
        if current == goal:
            return reconstruct_path(came_from, current), visited
        
        visited.add(current)
        
        for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:
            neighbor = (current[0]+dx, current[1]+dy)
            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]):
                if grid[neighbor[0]][neighbor[1]] != 1 and neighbor not in visited:
                    came_from[neighbor] = current
                    heapq.heappush(open_set, (heuristic(neighbor, goal), neighbor))
    
    return None, visited

def a_star(grid, start, goal, heuristic):
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {start: 0}
    visited = set()
    
    while open_set:
        _, current = heapq.heappop(open_set)
        
        if current == goal:
            return reconstruct_path(came_from, current), visited
        
        visited.add(current)
        
        for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:
            neighbor = (current[0]+dx, current[1]+dy)
            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]):
                if grid[neighbor[0]][neighbor[1]] != 1:
                    tentative_g = g_score[current] + 1
                    if neighbor not in g_score or tentative_g < g_score[neighbor]:
                        came_from[neighbor] = current
                        g_score[neighbor] = tentative_g
                        f_score = tentative_g + heuristic(neighbor, goal)
                        heapq.heappush(open_set, (f_score, neighbor))
    
    return None, visited


grid = [
    [0,0,1,0,0],
    [1,1,0,1,0],
    [0,0,0,1,0],
    [1,0,1,0,1],
    [0,0,0,0,0]
]

start = (0,0)  
goal = (4,4)   

path_gbfs, visited_gbfs = greedy_best_first(grid, start, goal, manhattan)
path_astar, visited_astar = a_star(grid, start, goal, manhattan)

print("Greedy BFS Path:", path_gbfs)
print("Nodes Explored:", len(visited_gbfs))
print("Path Length:", len(path_gbfs) if path_gbfs else "No Path")

print("\nA* Path:", path_astar)
print("Nodes Explored:", len(visited_astar))
print("Path Length:", len(path_astar) if path_astar else "No Path")